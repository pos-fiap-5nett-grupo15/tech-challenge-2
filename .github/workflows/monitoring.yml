name: Build and Deploy Prometheus and Grafana

on:
  push:
    branches:
      - feat/monitoring-settings
  workflow_dispatch:
  
jobs:
  upload:
    name: Upload Files
    runs-on: ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.__clientidstorage__ }}
          tenant-id: ${{ secrets.__tenantidsecretname__ }}
          subscription-id: ${{ secrets.__subscriptionidsecretname__ }}

      - name: Get storage account key
        id: get-storage-key
        run: |
          STORAGE_KEY=$(az storage account keys list --resource-group fiap-tech-challenge-2 --account-name fiapappstorage --query '[0].value' --output tsv)
          echo "storage-key=$STORAGE_KEY" >> $GITHUB_OUTPUT
          
      - name: Upload Configs
        run: |
          az storage file upload-batch \
            --account-name fiapappstorage \
            --destination fiapappfiles \
            --source ./docker/monitoring/config/. \
            --account-key ${{ steps.get-storage-key.outputs.storage-key }}

  prometheus:
    needs: upload
    name: Deploy Prometheus
    runs-on: ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.__clientidsecretname__  }}
          tenant-id: ${{ secrets.__tenantidsecretname__ }}
          subscription-id: ${{ secrets.__subscriptionidsecretname__ }}
          
      - name: Prometheus
        run: |
          set +e
          az container show --resource-group fiap-tech-challenge-2 --name prometheus;
          set -e
          if [ $? -eq 0 ]; then
            az container delete --resource-group fiap-tech-challenge-2 --name prometheus --yes
            az container create \
              --resource-group fiap-tech-challenge-2 \
              --name prometheus \
              --image grupo15fiap.azurecr.io/prom/prometheus:v2.24.1 \
              --registry-login-server  grupo15fiap.azurecr.io \
              --assign-identity \
              --registry-username=fiap-token \
              --registry-password=${{ secrets.__REGISTRYPASSWORD__ }} \
              --ports 9090 \
              --dns-name-label prometheus-container \
              --location eastus \
              --azure-file-volume-account-name fiapappstorage \
              --azure-file-volume-account-key ${{ secrets.__VOLUMEACCOUNTKEY__ }} \
              --azure-file-volume-share-name fiapappfiles \
              --azure-file-volume-mount-path /etc/Prometheus/ \
              --environment-variables PROMETHEUS_CONFIG_PATH=/etc/prometheus/prometheus.yml
          else
            az container create \
              --resource-group fiap-tech-challenge-2 \
              --name prometheus \
              --image grupo15fiap.azurecr.io/prom/prometheus:v2.24.1 \
              --registry-login-server  grupo15fiap.azurecr.io \
              --assign-identity \
              --registry-username=fiap-token \
              --registry-password=${{ secrets.__REGISTRYPASSWORD__ }} \
              --ports 9090 \
              --dns-name-label prometheus-container \
              --location eastus \
              --azure-file-volume-account-name fiapappstorage \
              --azure-file-volume-account-key ${{ secrets.__VOLUMEACCOUNTKEY__ }} \
              --azure-file-volume-share-name fiapappfiles \
              --azure-file-volume-mount-path /etc/Prometheus/ \
              --environment-variables PROMETHEUS_CONFIG_PATH=/etc/prometheus/prometheus.yml
          fi
          

  grafana:
    needs: prometheus
    name: Deploy Grafana
    runs-on: ubuntu-latest
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.__clientidsecretname__  }}
          tenant-id: ${{ secrets.__tenantidsecretname__ }}
          subscription-id: ${{ secrets.__subscriptionidsecretname__ }}
          
      - name: Azure az delete and create ACI
        run: |
          set +e
          az container show --resource-group fiap-tech-challenge-2 --name grafana;
          set -e
          if [ $? -eq 0 ]; then
            az container delete --resource-group fiap-tech-challenge-2 --name grafana --yes
            az container create \
              --resource-group fiap-tech-challenge-2 \
              --name grafana \
              --image grafana/grafana:7.2.1 \
              --registry-login-server  grupo15fiap.azurecr.io \
              --assign-identity \
              --registry-username=fiap-token \
              --registry-password=${{ secrets.__REGISTRYPASSWORD__ }} \
              --ports 3000 \
              --dns-name-label grafana-container \
              --location eastus \
              --azure-file-volume-account-name fiapappstorage \
              --azure-file-volume-account-key ${{ secrets.__VOLUMEACCOUNTKEY__ }} \
              --azure-file-volume-share-name fiapappfiles \
              --azure-file-volume-mount-path /etc/grafana/provisioning/ \
              --environment-variables GF_SECURITY_ADMIN_PASSWORD=admin

          else
            az container create \
              --resource-group fiap-tech-challenge-2 \
              --name grafana \
              --image grafana/grafana:7.2.1 \
              --registry-login-server  grupo15fiap.azurecr.io \
              --assign-identity \
              --registry-username=fiap-token \
              --registry-password=${{ secrets.__REGISTRYPASSWORD__ }} \
              --ports 3000 \
              --dns-name-label grafana-container \
              --location eastus \
              --azure-file-volume-account-name fiapappstorage \
              --azure-file-volume-account-key ${{ secrets.__VOLUMEACCOUNTKEY__ }} \
              --azure-file-volume-share-name fiapappfiles \
              --azure-file-volume-mount-path /etc/grafana/provisioning/ \
              --environment-variables GF_SECURITY_ADMIN_PASSWORD=admin
          fi
